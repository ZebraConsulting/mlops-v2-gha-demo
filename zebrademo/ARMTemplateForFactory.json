{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "zebrademo"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Run Batch Prediction')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Run-BatchEndpoint-MI",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Sink",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Run-BatchEndpoint-MI",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"endpoint_uri": "https://taxi-gha-bep-mlops-zebrademoprod.norwayeast.inference.ml.azure.com/jobs",
								"poll_interval": 120,
								"endpoint_input_uri": "azureml://subscriptions/5251204e-6ae9-4060-8a7d-2dcdacbec750/resourcegroups/rg-mlops-zebrademoprod/workspaces/mlw-mlops-zebrademoprod/datastores/batchdata/paths/taxi-batch.csv",
								"endpoint_input_type": "UriFile",
								"endpoint_output_uri": "azureml://datastores/workspaceblobstore/paths/batch/predictions.csv"
							}
						}
					},
					{
						"name": "Sink",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "taxibatch",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "taxibatch",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Run-BatchEndpoint-MI')]",
				"[concat(variables('factoryId'), '/datasets/taxibatch')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Run-BatchEndpoint-MI')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Invoke Batch-Endpoint",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@pipeline().parameters.endpoint_uri",
								"type": "Expression"
							},
							"method": "POST",
							"headers": {
								"Content-Type": "application/json"
							},
							"body": {
								"value": "@replace(replace(replace('{\n    \"properties\": {\n    \t\"InputData\": {\n    \t\t\"mnistinput\": {\n    \t\t\t\"JobInputType\" : \"<JOB_INPUT_TYPE>\",\n    \t\t\t\"Uri\" : \"<JOB_INPUT_URI>\"\n    \t\t}\n        },\n        \"OutputData\": {\n            \"customOutput\": {\n                \"JobOutputType\" : \"UriFile\",\n                \"Uri\" : \"<JOB_OUTPUT_URI>\"\n            }\n        }\n    }\n}',\n'<JOB_INPUT_URI>', pipeline().parameters.endpoint_input_uri),\n'<JOB_INPUT_TYPE>', pipeline().parameters.endpoint_input_type),\n'<JOB_OUTPUT_URI>', pipeline().parameters.endpoint_output_uri)",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://ml.azure.com"
							}
						}
					},
					{
						"name": "Wait for run",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "Invoke Batch-Endpoint",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(and(contains(activity('Check-Status').output, 'properties'), or(equals(activity('Check-Status').output.properties.status, 'Completed'), or(equals(activity('Check-Status').output.properties.status, 'Canceled'), equals(activity('Check-Status').output.properties.status, 'Failed')))), not(equals(activity('Fail-Pipeline-Check'), null)))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Check-Status",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Wait",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@concat(pipeline().parameters.endpoint_uri, '/', activity('Invoke Batch-Endpoint').output.name)",
											"type": "Expression"
										},
										"method": "GET",
										"headers": {
											"Content-Type": "application/json"
										},
										"authentication": {
											"type": "MSI",
											"resource": "https://ml.azure.com"
										}
									}
								},
								{
									"name": "Wait",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": {
											"value": "@pipeline().parameters.poll_interval",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Propage-Error",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Check-Status",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@and(contains(activity('Check-Status').output, 'properties'), or(equals(activity('Check-Status').output.properties.status, 'Failed'), equals(activity('Check-Status').output.properties.status, 'Canceled')))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Fail-Pipeline-Job",
												"type": "Fail",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"message": "Job has failed or has been canceled",
													"errorCode": "JobTerminated"
												}
											}
										]
									}
								},
								{
									"name": "Fail-Pipeline-Check",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "Check-Status",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('Check-Status').output.error.message",
											"type": "Expression"
										},
										"errorCode": {
											"value": "@activity('Check-Status').output.error.code",
											"type": "Expression"
										}
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"endpoint_uri": {
						"type": "string"
					},
					"poll_interval": {
						"type": "int",
						"defaultValue": 120
					},
					"endpoint_input_uri": {
						"type": "string"
					},
					"endpoint_input_type": {
						"type": "string",
						"defaultValue": "UriFile"
					},
					"endpoint_output_uri": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-06-17T16:28:12Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/taxibatch')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "taxi-batch.csv",
						"container": "batchdata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "distance",
						"type": "String"
					},
					{
						"name": "dropoff_latitude",
						"type": "String"
					},
					{
						"name": "dropoff_longitude",
						"type": "String"
					},
					{
						"name": "passengers",
						"type": "String"
					},
					{
						"name": "pickup_latitude",
						"type": "String"
					},
					{
						"name": "pickup_longitude",
						"type": "String"
					},
					{
						"name": "pickup_weekday",
						"type": "String"
					},
					{
						"name": "pickup_month",
						"type": "String"
					},
					{
						"name": "pickup_monthday",
						"type": "String"
					},
					{
						"name": "pickup_hour",
						"type": "String"
					},
					{
						"name": "pickup_minute",
						"type": "String"
					},
					{
						"name": "pickup_second",
						"type": "String"
					},
					{
						"name": "dropoff_weekday",
						"type": "String"
					},
					{
						"name": "dropoff_month",
						"type": "String"
					},
					{
						"name": "dropoff_monthday",
						"type": "String"
					},
					{
						"name": "dropoff_hour",
						"type": "String"
					},
					{
						"name": "dropoff_minute",
						"type": "String"
					},
					{
						"name": "dropoff_second",
						"type": "String"
					},
					{
						"name": "store_forward",
						"type": "String"
					},
					{
						"name": "vendor",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CustomerData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "CustomerData.csv",
						"container": "batchdata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "id",
						"type": "String"
					},
					{
						"name": "orgNr",
						"type": "String"
					},
					{
						"name": "companyName",
						"type": "String"
					},
					{
						"name": "visitingAddress",
						"type": "String"
					},
					{
						"name": "visitingPostCode",
						"type": "String"
					},
					{
						"name": "visitingCity",
						"type": "String"
					},
					{
						"name": "postalAddress",
						"type": "String"
					},
					{
						"name": "postalPostCode",
						"type": "String"
					},
					{
						"name": "postalCity",
						"type": "String"
					},
					{
						"name": "telephoneNumber",
						"type": "String"
					},
					{
						"name": "mobileNumber",
						"type": "String"
					},
					{
						"name": "telefaxNumber",
						"type": "String"
					},
					{
						"name": "municipality",
						"type": "String"
					},
					{
						"name": "county",
						"type": "String"
					},
					{
						"name": "noOfEmployees",
						"type": "String"
					},
					{
						"name": "regDate",
						"type": "String"
					},
					{
						"name": "foundedDate",
						"type": "String"
					},
					{
						"name": "orgForm",
						"type": "String"
					},
					{
						"name": "internet",
						"type": "String"
					},
					{
						"name": "chairman",
						"type": "String"
					},
					{
						"name": "managingDirector",
						"type": "String"
					},
					{
						"name": "acceded",
						"type": "String"
					},
					{
						"name": "managingDirectorTel",
						"type": "String"
					},
					{
						"name": "firstName",
						"type": "String"
					},
					{
						"name": "lastName",
						"type": "String"
					},
					{
						"name": "eMail",
						"type": "String"
					},
					{
						"name": "naceCode",
						"type": "String"
					},
					{
						"name": "naceDescription",
						"type": "String"
					},
					{
						"name": "salary",
						"type": "String"
					},
					{
						"name": "revenue",
						"type": "String"
					},
					{
						"name": "bankruptcyRate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EnlistActivity')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "EnlistActivities.csv",
						"container": "batchdata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "orgNr",
						"type": "String"
					},
					{
						"name": "lastActivityDate",
						"type": "String"
					},
					{
						"name": "lastActivityStatus",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CustomerData",
								"type": "DatasetReference"
							},
							"name": "CustomerData"
						},
						{
							"dataset": {
								"referenceName": "EnlistActivity",
								"type": "DatasetReference"
							},
							"name": "ActivityData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "EnlistTrainingset",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "JoinOnOrgNr"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as string,",
						"          orgNr as string,",
						"          companyName as string,",
						"          visitingAddress as string,",
						"          visitingPostCode as string,",
						"          visitingCity as string,",
						"          postalAddress as string,",
						"          postalPostCode as string,",
						"          postalCity as string,",
						"          telephoneNumber as string,",
						"          mobileNumber as string,",
						"          telefaxNumber as string,",
						"          municipality as string,",
						"          county as string,",
						"          noOfEmployees as string,",
						"          regDate as string,",
						"          foundedDate as string,",
						"          orgForm as string,",
						"          internet as string,",
						"          chairman as string,",
						"          managingDirector as string,",
						"          acceded as string,",
						"          managingDirectorTel as string,",
						"          firstName as string,",
						"          lastName as string,",
						"          eMail as string,",
						"          naceCode as string,",
						"          naceDescription as string,",
						"          salary as string,",
						"          revenue as string,",
						"          bankruptcyRate as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CustomerData",
						"source(output(",
						"          orgNr as string,",
						"          lastActivityDate as string,",
						"          lastActivityStatus as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ActivityData",
						"CustomerData, aggregate1 join(CustomerData@orgNr == aggregate1@orgNr,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinOnOrgNr",
						"ActivityData aggregate(groupBy(orgNr),",
						"     NumberOfCalls = count(orgNr)) ~> aggregate1",
						"JoinOnOrgNr select(mapColumn(",
						"          orgNr = CustomerData@orgNr,",
						"          companyName,",
						"          visitingAddress,",
						"          visitingPostCode,",
						"          visitingCity,",
						"          postalAddress,",
						"          postalPostCode,",
						"          postalCity,",
						"          municipality,",
						"          county,",
						"          noOfEmployees,",
						"          regDate,",
						"          foundedDate,",
						"          orgForm,",
						"          internet,",
						"          chairman,",
						"          managingDirector,",
						"          acceded,",
						"          managingDirectorTel,",
						"          naceCode,",
						"          naceDescription,",
						"          salary,",
						"          revenue,",
						"          bankruptcyRate,",
						"          NumberOfCalls",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as string,",
						"          orgNr as string,",
						"          companyName as string,",
						"          visitingAddress as string,",
						"          visitingPostCode as string,",
						"          visitingCity as string,",
						"          postalAddress as string,",
						"          postalPostCode as string,",
						"          postalCity as string,",
						"          telephoneNumber as string,",
						"          mobileNumber as string,",
						"          telefaxNumber as string,",
						"          municipality as string,",
						"          county as string,",
						"          noOfEmployees as string,",
						"          regDate as string,",
						"          foundedDate as string,",
						"          orgForm as string,",
						"          internet as string,",
						"          chairman as string,",
						"          managingDirector as string,",
						"          acceded as string,",
						"          managingDirectorTel as string,",
						"          firstName as string,",
						"          lastName as string,",
						"          eMail as string,",
						"          naceCode as string,",
						"          naceDescription as string,",
						"          salary as string,",
						"          revenue as string,",
						"          bankruptcyRate as string",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CustomerData')]",
				"[concat(variables('factoryId'), '/datasets/EnlistActivity')]",
				"[concat(variables('factoryId'), '/datasets/EnlistTrainingset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EnlistTrainingset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "batchdata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "id",
						"type": "String"
					},
					{
						"name": "orgNr",
						"type": "String"
					},
					{
						"name": "companyName",
						"type": "String"
					},
					{
						"name": "visitingAddress",
						"type": "String"
					},
					{
						"name": "visitingPostCode",
						"type": "String"
					},
					{
						"name": "visitingCity",
						"type": "String"
					},
					{
						"name": "postalAddress",
						"type": "String"
					},
					{
						"name": "postalPostCode",
						"type": "String"
					},
					{
						"name": "postalCity",
						"type": "String"
					},
					{
						"name": "telephoneNumber",
						"type": "String"
					},
					{
						"name": "mobileNumber",
						"type": "String"
					},
					{
						"name": "telefaxNumber",
						"type": "String"
					},
					{
						"name": "municipality",
						"type": "String"
					},
					{
						"name": "county",
						"type": "String"
					},
					{
						"name": "noOfEmployees",
						"type": "String"
					},
					{
						"name": "regDate",
						"type": "String"
					},
					{
						"name": "foundedDate",
						"type": "String"
					},
					{
						"name": "orgForm",
						"type": "String"
					},
					{
						"name": "internet",
						"type": "String"
					},
					{
						"name": "chairman",
						"type": "String"
					},
					{
						"name": "managingDirector",
						"type": "String"
					},
					{
						"name": "acceded",
						"type": "String"
					},
					{
						"name": "managingDirectorTel",
						"type": "String"
					},
					{
						"name": "firstName",
						"type": "String"
					},
					{
						"name": "lastName",
						"type": "String"
					},
					{
						"name": "eMail",
						"type": "String"
					},
					{
						"name": "naceCode",
						"type": "String"
					},
					{
						"name": "naceDescription",
						"type": "String"
					},
					{
						"name": "salary",
						"type": "String"
					},
					{
						"name": "revenue",
						"type": "String"
					},
					{
						"name": "bankruptcyRate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CreateTrainingset')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CustomerData": {},
									"ActivityData": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow1')]"
			]
		}
	]
}